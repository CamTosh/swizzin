#!/bin/bash

function whiptail_qbittorrent() {
    if [[ -z $qbittorrent ]]; then
        . /etc/swizzin/sources/functions/apt
        codename=$(lsb_release -cs)
        releases=$(git ls-remote -t --sort=-v:refname --refs https://github.com/qbittorrent/qBittorrent.git | awk '{sub("refs/tags/release-", "");sub("(.*)(rc|alpha|beta)(.*)", ""); print $2 }' | awk '!/^$/')

        latestv41=$(echo "$releases" | grep -m1 -oP '4\.1\.\d?.?\d')
        latestv42=$(echo "$releases" | grep -m1 -oP '4\.2\.\d?.?\d')
        latestv43=$(echo "$releases" | grep -m1 -oP '4\.3\.\d?.?\d')
        #latestv=$(echo "$releases" | grep -m1 -oP '\d.\d?.?\d?.?\d')

        case ${codename} in
            "xenial" | "stretch")
                function=$(whiptail --title "Install Software" --menu "Choose a qBittorrent version:" --ok-button "Continue" --nocancel 12 50 3 \
                    "4.1" "(${latestv41})" 3>&1 1>&2 2>&3)
                ;;
            *)
                function=$(whiptail --title "Install Software" --menu "Choose a qBittorrent version:" --ok-button "Continue" --nocancel 12 50 4 \
                    "4.1" "(${latestv41})" \
                    "4.2" "(${latestv42})" \
                    "4.3" "(${latestv43})" 3>&1 1>&2 2>&3)
                #"Latest" "(${latestv})" 3>&1 1>&2 2>&3)
                ;;
        esac
        if [[ $function == "4.1" ]]; then
            export qbittorrent=${latestv41}
        elif [[ $function == "4.2" ]]; then
            export qbittorrent=${latestv42}
        elif [[ $function == "4.3" ]]; then
            export qbittorrent=${latestv43}
        #elif [[ $function == "Latest" ]]; then
        #    export qbittorrent=${latestv}
        fi
    fi
}

function build_libtorrent_qbittorrent() {
    case $qbittorrent in
        4.1.*)
            libtorrent_branch=RC_1_1
            ;;
        4.2.*)
            libtorrent_branch=RC_1_2
            ;;
        4.3.*)
            libtorrent_branch=RC_1_2
            ;;
        4.4.*)
            libtorrent_branch=RC_2_0
            ;;
        *)
            echo_error "qBittorrent version should not be empty. Setup will not proceed."
            exit 1
            ;;
    esac

    booststrap
    echo 'using gcc : : : <cflags>"-march=native -std=c++14" <cxxflags>"-march=native -std=c++14" ;' > /root/user-config.jam

    cd /tmp
    git clone -b ${libtorrent_branch} https://github.com/arvidn/libtorrent >> ${log} 2>&1
    cd /tmp/libtorrent
    if [[ -f /root/libtorrent-${libtorrent_branch}.patch ]]; then
        patch -p1 < /root/libtorrent-${libtorrent_branch}.patch >> ${log} 2>&1
    fi
    VERSION=$(grep AC_INIT configure.ac | grep -oP '\d+\.\d+\.\d+')
    /opt/boost_${BOOST_VERSION}/b2 -j$(nproc) crypto=openssl variant=release link=static install --prefix=/tmp/dist/libtorrent/usr/local install >> ${log} 2>&1
    tag=" static with c++14 march=native"
    mkdir -p /root/dist
    fpm -f -C /tmp/dist/libtorrent -p /root/dist/libtorrent-rasterbar_VERSION.deb -s dir -t deb -n libtorrent-rasterbar --version ${VERSION} --description "Libtorrent rasterbar compiled by swizzin$tag" >> ${log} 2>&1
    rm_if_exists /tmp/libtorrent
    rm_if_exists /tmp/dist
    dpkg -i /root/dist/libtorrent-rasterbar_${VERSION}.deb >> ${log} 2>&1 || {
        echo_error "Libtorrent could not be installed. Setup will not proceed"
        exit 1
    }
}

function build_qbittorrent() {
    if [[ $qbittorrent == repo ]]; then
        apt_install qbittorrent-nox
    else
        noexec=$(grep "/tmp" /etc/fstab | grep noexec)
        if [[ -n $noexec ]]; then
            mount -o remount,exec /tmp
            noexec=1
        fi
        VERSION=${qbittorrent}
        LIST='build-essential automake pkg-config libtool git zlib1g-dev libssl-dev libgeoip-dev python3 qtbase5-dev qttools5-dev-tools zlib1g-dev'

        apt_install --no-recommends $LIST
        cd /tmp
        rm_if_exists "/tmp/qbittorrent"
        wget https://github.com/qbittorrent/qBittorrent/archive/release-${VERSION}.tar.gz >> "${log}" 2>&1
        mkdir qbittorrent
        tar -xvf release-${VERSION}.tar.gz -C /tmp/qbittorrent --strip-components=1 >> $log 2>&1
        rm -rf release-${VERSION}.tar.gz
        cd qbittorrent
        tag=" stdc++14 march=native"
        ./configure --prefix=/usr --disable-gui --with-boost=${BOOST_ROOT} --with-boost-libdir="/usr/local/lib" libtorrent_CFLAGS="-I/usr/local/include -I${BOOST_ROOT}" libtorrent_LIBS="-L/usr/local/lib -l:libtorrent.a" CXXFLAGS="-march=native -std=c++14" >> ${log} 2>&1
        make -j$(nproc) >> $log 2>&1
        make INSTALL_ROOT=/tmp/dist/qbittorrent install >> ${log} 2>&1
        mkdir -p /root/dist
        fpm -f -C /tmp/dist/qbittorrent -p /root/dist/qbittorrent-nox_VERSION.deb -s dir -t deb -n qbittorrent-nox --version ${VERSION} --description "qbittorrent-nox compiled by swizzin$tag" >> ${log} 2>&1
        dpkg -i /root/dist/qbittorrent-nox_${VERSION}.deb >> ${log} 2>&1
        cd /tmp
        rm -rf /tmp/qbittorrent
        if [[ -n $noexec ]]; then
            mount -o remount,noexec /tmp
        fi
    fi
}

function qbittorrent_service() {
    if [[ ! -f /etc/systemd/system/qbittorent@.service ]]; then
        type=simple
        if [[ $(systemctl --version | awk 'NR==1 {print $2}') -ge 240 ]]; then
            type=exec
        fi
        cat > /etc/systemd/system/qbittorrent@.service << EOQBS
[Unit]
Description=qBittorrent-nox service for %i
Documentation=man:qbittorrent-nox(1)
Wants=network-online.target
After=network-online.target nss-lookup.target

[Service]
Type=$type
User=%i
Group=%i
ExecStart=/usr/bin/qbittorrent-nox

[Install]
WantedBy=multi-user.target
EOQBS
    fi
}

function qbittorrent_user_config() {
    user=$1
    local_packages=/usr/local/bin/swizzin
    qbtv=$(qbittorrent-nox --version | grep -oP '\d+\.\d+\.\d+')
    password=$(_get_user_password ${user})
    if dpkg --compare-versions ${qbtv} lt 4.2.0; then
        hashed=$(echo -n "$password" | md5sum | awk '{print $1}')
        QBTWP="WebUI\Password_ha1=@ByteArray($hashed)"
    else
        hashed=$(python3 ${local_packages}/qbittorrent.Userpass.py ${password})
        QBTWP="WebUI\Password_PBKDF2=\"@ByteArray($hashed)\""
    fi

    usermod -a -G ${user} www-data 2>> $log
    port=$(port 10000 11000)
    mkdir -p /home/${user}/.config/qBittorrent/
    mkdir -p /home/${user}/torrents/qbittorrent
    chown ${user}: /home/${user}/torrents
    chown ${user}: /home/${user}/torrents/qbittorrent
    chown $user: /home/${user}/.config
    chown $user: /home/${user}/.config/qBittorrent
    cat > /home/${user}/.config/qBittorrent/qBittorrent.conf << QBTCONF
[BitTorrent]
Session\DisableAutoTMMByDefault=false 

[Preferences]
Bittorrent\MaxConnecs=-1
Bittorrent\MaxConnecsPerTorrent=-1
Bittorrent\MaxUploads=-1
Bittorrent\MaxUploadsPerTorrent=-1
Downloads\SavePath=/home/${user}/torrents/qbittorrent/
Queueing\QueueingEnabled=false
WebUI\Address=*
WebUI\AlternativeUIEnabled=false
WebUI\BanDuration=3600
WebUI\CSRFProtection=true
WebUI\ClickjackingProtection=true
WebUI\LocalHostAuth=true
WebUI\MaxAuthenticationFailCount=5
${QBTWP}
WebUI\Port=${port}
WebUI\RootFolder=
WebUI\SecureCookie=true
WebUI\ServerDomains=*
WebUI\SessionTimeout=3600
WebUI\UseUPnP=true
WebUI\Username=${user}
QBTCONF
}

function qbittorrent_chpasswd() {
    user=$1
    password=$2
    local_packages=/usr/local/bin/swizzin
    qbtv=$(qbittorrent-nox --version | grep -oP '\d+\.\d+\.\d+')
    active=$(systemctl is-active qbittorent@${user})
    if dpkg --compare-versions ${qbtv} lt 4.2.0; then
        hashed=$(echo -n "$password" | md5sum | awk '{print $1}')
        QBTWP="WebUI\\\Password_ha1=@ByteArray($hashed)"
    else
        hashed=$(python3 ${local_packages}/qbittorrent.Userpass.py ${password})
        QBTWP="WebUI\\\Password_PBKDF2=\"@ByteArray($hashed)\""
    fi
    systemctl stop qbittorrent@${user}
    sed -i "s|WebUI\\\Password.*|$QBTWP|g" /home/${user}/.config/qBittorrent/qBittorrent.conf
    if [[ $active == "active" ]]; then
        systemctl start qbittorrent@${user}
    fi
}
